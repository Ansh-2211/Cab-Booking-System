# -*- coding: utf-8 -*-
"""CabGemini.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nQk7D6uOPKr7GJ0nYp3hC_4CAuvSgdTo
"""

# Modules

import os
import pandas as pd
from tabulate import tabulate
from prettytable import PrettyTable 


# Functions

# Function to take input from user

def InputDetails():
    name = input("Enter your name: ")
    mobile = int(input("Enter your phone number: "))
    
    print("Enter journey details:")
    fr = input("\tFrom: ")
    to = input("\tTo: ")
    distance = int(input("Enter estimate distance (in km): "))
    
    fareTable = PrettyTable(["S.No.", "Type", "Fare"])
    fareTable.add_row(["1.", "Mini", "7 Rs/Km"])
    fareTable.add_row(["2.", "Sedan", "15 Rs/Km"])
    fareTable.add_row(["3.", "SUV", "24 Rs/Km"])
    print(fareTable.get_string(title = "Fare Details"))
    print("Base fare for each ride is 30 Rs.")
    cabtype = int(input("Enter the cab type (S.No.): "))
    
    fare = CalculateFare(distance, cabtype)
    print("Your estimate fare is", fare, "Rs.")
    
    s = {'Name' : [], 'Mobile' : [], 'From' : [], 'To' : [], 'Distance' : [], 'Type' : [], 'Fare' : []}
    s['Name'].append(name)
    s['Mobile'].append(mobile)
    s['From'].append(fr)
    s["To"].append(to)
    s["Distance"].append(distance)
    s["Type"].append(cabtype)
    s["Fare"].append(fare)
    
    return s


# Function to calculate fare

def CalculateFare(distance, cabtype):
    if cabtype == 1:
        return 30 + (7*distance)
    elif cabtype == 2:
        return 30 + (15*distance)
    else:
        return 30 + (24*distance)


# Function to book a ride  

def BookRide():
    s = InputDetails()
    df = pd.DataFrame(s)
    print(tabulate(df, showindex = False, headers = 'keys', tablefmt = 'grid'))
    if not os.path.isfile("CabGemini.csv"):
        df.to_csv("CabGemini.csv", index = False)
    else:
        df.to_csv("CabGemini.csv", index = False, mode='a', header = False)


# Function to show details of a booked ride

def RideDetails():
    df = pd.read_csv("CabGemini.csv")
    mobile = int(input("Enter your phone number: "))
    df = df[df['Mobile'] == mobile]
    print(tabulate(df, showindex = False, headers = 'keys', tablefmt = 'psql'))


# Function to modify details of a booked ride

def ModifyRide():
    df = pd.read_csv("CabGemini.csv")
    mobile = int(input("Enter your phone number: "))
    if mobile in df['Mobile'].tolist():
        df = df[df['Mobile'] != mobile]
        df.to_csv("CabGemini.csv", index = False, mode='w')
        BookRide()
        print("Ride details updated!")
    else:
        print("Phone number not found!")


# Function to cancel a ride

def CancelRide():
    df = pd.read_csv("CabGemini.csv")
    mobile = int(input("Enter your phone number: "))
    df = df[df['Mobile'] != mobile]
    df.to_csv("CabGemini.csv", index = False, mode='w')
    print("Ride cancelled!")


# Function to show details of all booked rides

def AllRides():
    df = pd.read_csv("CabGemini.csv")
    print(tabulate(df, showindex = False, headers = 'keys', tablefmt = 'psql'))


# Main menu

def Menu():
    answer = 'y'
    while answer == 'y':
        print("\nWelcome to Cab Booking System\n")
        print("1. Book a ride")
        print("2. Get details of the ride")
        print("3. Modify details of the ride")
        print("4. Cancel the ride")
        print("5. Show all current rides")
        print("6. Exit")
        choice = int(input("Enter your choice: "))
        
        if choice == 1:
            BookRide()
            print("Ride confirmed!")
        elif choice == 2:
            RideDetails()
        elif choice == 3:
            ModifyRide()
        elif choice == 4:
            CancelRide()
        elif choice == 5:
            AllRides()
        elif choice == 6:
            print("Program exit!")
            break
        else:
            print("Wrong choice!")
            continue
        answer = input("Do you want to continue? (y/n): ")

if __name__ == '__main__':
    Menu()